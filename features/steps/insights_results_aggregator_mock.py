# Copyright Â© 2023 Pavel Tisnovsky, Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Implementation of test steps that run Insights Results Aggregator Mock and check its output."""

import subprocess
from behave import when, then
from src.process_output import process_generated_output


# default name of file generated by Insights Aggregator Cleaner during testing
test_output = "test"


@when(u'I run the Insights Results Aggregator Mock with the {flag} command line flag')
def run_insights_results_aggregator_mock_with_flag(context, flag):
    """Start the cleaner with given command-line flag."""
    out = subprocess.Popen(
        ["insights-results-aggregator-mock", flag],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )

    assert out is not None
    process_generated_output(context, out, 2)


def check_help_from_mock(context):
    """Check if help is displayed by Insights Results Aggregator Mock."""
    expected_output = """
Service to provide content for OCP rules

Usage:

    insights-results-aggregator-mock [command]

The commands are:

    <EMPTY>                      starts content service
    start-service                starts content service
    help     print-help          prints help
    config   print-config        prints current configuration set by files & env variables
    version  print-version-info  prints version info
    authors  print-authors       prints authors"""

    assert context.stdout is not None
    stdout = context.stdout.decode("utf-8").replace("\t", "    ")

    # preliminary checks
    assert stdout is not None, "stdout object should exist"
    assert type(stdout) is str, "wrong type of stdout object"

    # check the output
    assert stdout.strip() == expected_output.strip(), "{} != {}".format(
        stdout, expected_output
    )


def check_version_from_mock(context):
    """Check if version info is displayed by Insights Results Aggregator Mock."""
    # preliminary checks
    assert context.output is not None
    assert type(context.output) is list, "wrong type of output"

    # check the output
    assert (
        "Version:\t0.1" in context.output
    ), "Caught output: {}".format(context.output)


def check_authors_info_from_mock(context):
    """Check if information about authors is displayed by Insights Results Aggregator Mock."""
    # preliminary checks
    assert context.output is not None
    assert type(context.output) is list, "wrong type of output"

    # check the output
    assert (
        "Pavel Tisnovsky <ptisnovs@redhat.com>" in context.output
    ), "Caught output: {}".format(context.output)


@then(u'I should see actual configuration displayed by Insights Results Aggregator Mock on standard output')  # noqa E501
def check_actual_configuration(context):
    """Check if actual configuration is displayed by Insights Results Aggregator Mock."""
    # preliminary checks
    assert context.output is not None
    assert type(context.output) is list, "wrong type of output"

    # check the output
    assert "Server" in context.output[1], "Caught output: {}".format(context.output)
    assert "Address" in context.output[2], "Caught output: {}".format(context.output)
    assert "APIPrefix" in context.output[3], "Caught output: {}".format(context.output)
    assert "APISpecFile" in context.output[4], "Caught output: {}".format(context.output)
    assert "Content" in context.output[7], "Caught output: {}".format(context.output)
